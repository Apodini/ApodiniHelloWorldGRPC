//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: webservice.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `GreeterClient`, then call methods of this protocol to make API calls.
internal protocol GreeterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GreeterClientInterceptorFactoryProtocol? { get }

  func greetName(
    _ request: GreeterMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<GreeterMessage, StringMessageMessage>
}

extension GreeterClientProtocol {
  internal var serviceName: String {
    return "Greeter"
  }

  /// Unary call to greetName
  ///
  /// - Parameters:
  ///   - request: Request to send to greetName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func greetName(
    _ request: GreeterMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<GreeterMessage, StringMessageMessage> {
    return self.makeUnaryCall(
      path: "/Greeter/greetName",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegreetNameInterceptors() ?? []
    )
  }
}

internal protocol GreeterClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'greetName'.
  func makegreetNameInterceptors() -> [ClientInterceptor<GreeterMessage, StringMessageMessage>]
}

internal final class GreeterClient: GreeterClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.5) && canImport(_Concurrency)
@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
internal protocol GreeterAsyncClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GreeterClientInterceptorFactoryProtocol? { get }

  func makegreetNameCall(
    _ request: GreeterMessage,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<GreeterMessage, StringMessageMessage>
}

@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension GreeterAsyncClientProtocol {
  internal var serviceName: String {
    return "Greeter"
  }

  internal var interceptors: GreeterClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makegreetNameCall(
    _ request: GreeterMessage,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<GreeterMessage, StringMessageMessage> {
    return self.makeAsyncUnaryCall(
      path: "/Greeter/greetName",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegreetNameInterceptors() ?? []
    )
  }
}

@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension GreeterAsyncClientProtocol {
  internal func greetName(
    _ request: GreeterMessage,
    callOptions: CallOptions? = nil
  ) async throws -> StringMessageMessage {
    return try await self.performAsyncUnaryCall(
      path: "/Greeter/greetName",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makegreetNameInterceptors() ?? []
    )
  }
}

@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
internal struct GreeterAsyncClient: GreeterAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GreeterClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.5) && canImport(_Concurrency)

/// To build a server, implement a class that conforms to this protocol.
internal protocol GreeterProvider: CallHandlerProvider {
  var interceptors: GreeterServerInterceptorFactoryProtocol? { get }

  func greetName(request: GreeterMessage, context: StatusOnlyCallContext) -> EventLoopFuture<StringMessageMessage>
}

extension GreeterProvider {
  internal var serviceName: Substring { return "Greeter" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "greetName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<GreeterMessage>(),
        responseSerializer: ProtobufSerializer<StringMessageMessage>(),
        interceptors: self.interceptors?.makegreetNameInterceptors() ?? [],
        userFunction: self.greetName(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol GreeterServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'greetName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makegreetNameInterceptors() -> [ServerInterceptor<GreeterMessage, StringMessageMessage>]
}

